What happens when you initialize a repository? Why do you need to do it?

An empty repository is created. This is necessary to produce the metadata
files which will be used to maintain the repository once files have been
committed to it.

How is the staging area different from the working directory and the repository? 

Files still in the working directory are "marked to be commited" to the repository
with the next commit when they are added to the staging area, other files in the
working directory will not have there changes committed until they are added to
the staging area. Files in the repository can have many versions based on their
commit ID, allowing the differences between versions to be viewed and allowing
older versions to be reverted to.

What value do you think it offers?

It makes it easier to separate commits based on their logical meaning.

How can you use the staging area to make sure you have one commit per logical change?

By only adding logically connected files to the staging area before each commit.

What are some situations when branches would be helpful in keeping your history
organized? 

When experimental versions are being created, when complex bugs are being traced,
when alternative versions are being made.

How would branches help?

They allow you to jump back and forth between versions easily, and allow you to merge
changes made in different versions when necessary (say a bug fix in the master version).

How do the diagrams help you visualize the branch structure?

Diagrams make the struture easier to understand, allowing you to see which commits effect
which branches, and which are missing from which branches.

What is the result of merging two branches together? 

All of the changes made in both branches are combined into a new commit for the checked out
branch

Why do we represent it in the diagram the way we do?

Because the resulting branch has the two merged branches as its parent

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

The pros are that it saves a whole lot of drudgery in merging two branches that is required
when doing the work manually, the cons are the potential for git to get it wrong.

